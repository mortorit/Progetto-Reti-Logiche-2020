----------------------------------------------------------------------------------
-- Company: Politecnico di Milano   
-- Engineer: Cristian Sbrolli
-- 
-- Create Date: 25.02.2020 23:51:28
-- Design Name: PFRL
-- Module Name: progetto - Behavioral
-- Project Name: ProgettoRL
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity project_reti_logiche is
port (
i_clk : in std_logic;
i_start : in std_logic;
i_rst : in std_logic;
i_data : in std_logic_vector(7 downto 0);
o_address : out std_logic_vector(15 downto 0);
o_done : out std_logic;
o_en : out std_logic;
o_we : out std_logic;
o_data : out std_logic_vector (7 downto 0)
);
end project_reti_logiche;

architecture Behavioral of project_reti_logiche is

type state_type is(
    START,  -- Stato Iniziale Della Macchina
    GETIND,--Richiede l'indirizzo da codificare
    WAITMEM,--aspetta la memoria
    CHECKWB,--Verifica l'appartenenza alla WB e in caso negativo richiede la prossima (se esiste)
    COD,--Gestisce la codifica dell'indirizzo e lo manda alla memoria
    DONE, -- Porta il segnale o_done a 1
    DONE_WAIT -- Attende un segnale di start a 0, dopodich√® porta Done a 0 e riporta la fsm allo stato iniziale
    );
    
signal STATE,SP : state_type;

begin
    process(i_clk,i_rst)
    --dichiarazione variabili
    
    variable IND: std_logic_vector(7 downto 0);
    variable BASEADDR: std_logic_vector(7 downto 0);
    variable BASENUM:std_logic_vector(2 downto 0);
    variable SUB: std_logic_vector(7 downto 0);
    variable FOUND: bit;
    variable OFFSETOH: std_logic_vector(3 downto 0);
    
    begin
    
    if(i_rst = '1') then
        STATE <= START;      
        
    elsif(rising_edge(i_clk)) then 
        case STATE is 
            
            when START =>
                BASENUM:= "000";
                if i_start= '1' and i_rst= '0' then
                    o_address <= "0000000000001000";
                    o_en<='1';
                    o_we<='0';
                    STATE <= WAITMEM;
                    SP<= START;
                    found:= '0';
                    offsetoh:= (others => '0');
                end if;
            
            when WAITMEM =>
                if (SP = START) then
                STATE <= GETIND;
                elsif (SP= GETIND or SP=CHECKWB) then
                STATE <= CHECKWB;
                end if;
              
            
            when GETIND =>
                IND := i_data;
                o_address <= "0000000000000" & basenum;
                STATE <= WAITMEM;
                SP <= GETIND;
            
            when CHECKWB =>
                baseaddr:= i_data;            
                sub:= std_logic_vector(unsigned(ind) - unsigned(baseaddr));
                if unsigned(sub) <= 3 then
                STATE <= COD;
                found:= '1';
                end if;
                if (found = '0') then
                    if (basenum = "111") then
                        STATE <= COD;
                    else
                        basenum := basenum + "1";
                        o_address <= "0000000000000" & basenum;
                        SP<=CHECKWB;
                        STATE<=WAITMEM;
                    end if;             
                end if;
            
            when COD =>
                if (found = '1') then
                offsetoh(to_integer(unsigned(sub(1 downto 0)))):= '1';
                o_data <= '1' & basenum & offsetoh;
                else
                o_data <= ind;
                end if;
                o_address <= "0000000000001001";
                o_we <= '1';
                STATE <= DONE;
            
            when DONE =>
                o_en <= '0'; -- Disabilito la lettura
                o_we <= '0'; -- Disabilito la scrittura
                o_done <= '1'; -- Alzo il segnale di DOne
                STATE <= DONE_WAIT; 
            
            when DONE_WAIT =>
                if(i_start = '0') then -- Attneod che start si abbassi per abbassare il done
                    o_done <= '0'; -- Abbasso il Done
                    STATE <= START; -- Torno Allo stato iniziale
                end if;     
                     
            end case;
        end if;                
    end process;
end Behavioral;
